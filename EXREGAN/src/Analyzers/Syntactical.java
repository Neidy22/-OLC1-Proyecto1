
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import Main.EXREGAN;
import Objects.*;
import ui.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntactical extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntactical() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntactical(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactical(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\006\010\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\010\003\000\002\007\006" +
    "\000\002\012\005\000\002\012\005\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\005\006\000\002\011" +
    "\005\000\002\011\003\000\002\013\005\000\002\013\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\010\004\007\005\004\020\005\001\002\000" +
    "\010\004\007\005\004\020\005\001\002\000\020\003\023" +
    "\004\021\005\025\007\012\015\017\021\013\027\016\001" +
    "\002\000\004\002\011\001\002\000\010\004\007\005\004" +
    "\020\005\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\001\001\002\000\006\023\060\024\061\001\002\000\010" +
    "\004\ufff8\005\ufff8\020\ufff8\001\002\000\010\004\007\005" +
    "\004\020\005\001\002\000\020\003\023\004\021\005\025" +
    "\007\012\015\017\021\013\027\016\001\002\000\004\023" +
    "\033\001\002\000\004\015\032\001\002\000\020\003\ufff7" +
    "\004\ufff7\005\ufff7\007\ufff7\015\ufff7\021\ufff7\027\ufff7\001" +
    "\002\000\020\003\023\004\021\005\025\007\012\015\017" +
    "\021\013\027\016\001\002\000\020\003\023\004\021\005" +
    "\025\007\012\015\017\021\013\027\016\001\002\000\020" +
    "\003\023\004\021\005\025\007\012\015\017\021\013\027" +
    "\016\001\002\000\020\003\ufff6\004\ufff6\005\ufff6\007\ufff6" +
    "\015\ufff6\021\ufff6\027\ufff6\001\002\000\020\003\023\004" +
    "\021\005\025\007\012\015\017\021\013\027\016\001\002" +
    "\000\010\004\ufffc\005\ufffc\020\ufffc\001\002\000\010\004" +
    "\ufff9\005\ufff9\020\ufff9\001\002\000\010\004\ufffa\005\ufffa" +
    "\020\ufffa\001\002\000\010\004\ufffd\005\ufffd\020\ufffd\001" +
    "\002\000\020\003\ufff5\004\ufff5\005\ufff5\007\ufff5\015\ufff5" +
    "\021\ufff5\027\ufff5\001\002\000\004\007\034\001\002\000" +
    "\004\024\035\001\002\000\006\007\042\025\040\001\002" +
    "\000\004\022\ufff0\001\002\000\004\022\055\001\002\000" +
    "\010\016\050\017\051\022\uffe2\001\002\000\004\022\ufff1" +
    "\001\002\000\010\016\043\017\044\022\uffe4\001\002\000" +
    "\004\007\047\001\002\000\004\007\045\001\002\000\004" +
    "\022\ufff3\001\002\000\004\022\uffe5\001\002\000\006\016" +
    "\043\022\uffe4\001\002\000\004\025\054\001\002\000\004" +
    "\025\052\001\002\000\004\022\ufff2\001\002\000\004\022" +
    "\uffe3\001\002\000\006\016\050\022\uffe2\001\002\000\020" +
    "\003\ufff4\004\ufff4\005\ufff4\007\ufff4\015\ufff4\021\ufff4\027" +
    "\ufff4\001\002\000\010\004\ufffb\005\ufffb\020\ufffb\001\002" +
    "\000\004\002\000\001\002\000\004\006\105\001\002\000" +
    "\022\006\067\010\066\011\072\012\063\013\071\014\064" +
    "\020\070\026\065\001\002\000\004\022\104\001\002\000" +
    "\022\006\067\010\066\011\072\012\063\013\071\014\064" +
    "\020\070\026\065\001\002\000\022\006\067\010\066\011" +
    "\072\012\063\013\071\014\064\020\070\026\065\001\002" +
    "\000\024\006\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\020\uffe7\022\uffe7\026\uffe7\001\002\000\022\006\067" +
    "\010\066\011\072\012\063\013\071\014\064\020\070\026" +
    "\065\001\002\000\024\006\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\020\uffe8\022\uffe8\026\uffe8\001\002\000" +
    "\004\007\076\001\002\000\022\006\067\010\066\011\072" +
    "\012\063\013\071\014\064\020\070\026\065\001\002\000" +
    "\022\006\067\010\066\011\072\012\063\013\071\014\064" +
    "\020\070\026\065\001\002\000\022\006\067\010\066\011" +
    "\072\012\063\013\071\014\064\020\070\026\065\001\002" +
    "\000\024\006\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\020\uffed\022\uffed\026\uffed\001\002\000\024\006\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\020\uffeb\022" +
    "\uffeb\026\uffeb\001\002\000\004\021\077\001\002\000\024" +
    "\006\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\020" +
    "\uffe9\022\uffe9\026\uffe9\001\002\000\022\006\067\010\066" +
    "\011\072\012\063\013\071\014\064\020\070\026\065\001" +
    "\002\000\024\006\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\020\uffee\022\uffee\026\uffee\001\002\000\024\006" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\020\uffea" +
    "\022\uffea\026\uffea\001\002\000\024\006\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\020\uffec\022\uffec\026\uffec" +
    "\001\002\000\020\003\uffef\004\uffef\005\uffef\007\uffef\015" +
    "\uffef\021\uffef\027\uffef\001\002\000\004\022\106\001\002" +
    "\000\020\003\uffe6\004\uffe6\005\uffe6\007\uffe6\015\uffe6\021" +
    "\uffe6\027\uffe6\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\004\002\005\001\001\000\004\002\106\001" +
    "\001\000\014\003\013\004\014\005\021\006\017\007\023" +
    "\001\001\000\002\001\001\000\004\002\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\056\001\001\000\014\003\055\004" +
    "\014\005\021\006\017\007\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\030\004" +
    "\014\005\021\006\017\007\023\001\001\000\014\003\027" +
    "\004\014\005\021\006\017\007\023\001\001\000\014\003" +
    "\026\004\014\005\021\006\017\007\023\001\001\000\002" +
    "\001\001\000\014\003\025\004\014\005\021\006\017\007" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\036\011\040\013\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\061\001\001\000\002\001" +
    "\001\000\004\012\102\001\001\000\004\012\101\001\001" +
    "\000\002\001\001\000\004\012\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\074\001\001\000\004" +
    "\012\072\001\001\000\004\012\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactical$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactical$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactical$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    //metodos para controlar el arbol de expresiones
    public static int ids = 0;
    public static AST rootT;

    //metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        EXREGAN.errores.add(tmp);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperación
    public  void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        EXREGAN.errores.add(tmp);
        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntactical$actions {
  private final Syntactical parser;

  /** Constructor */
  CUP$Syntactical$actions(Syntactical parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntactical$do_action_part00000000(
    int                        CUP$Syntactical$act_num,
    java_cup.runtime.lr_parser CUP$Syntactical$parser,
    java.util.Stack            CUP$Syntactical$stack,
    int                        CUP$Syntactical$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactical$result;

      /* select the action based on the action number */
      switch (CUP$Syntactical$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).value;
		RESULT = start_val;
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactical$parser.done_parsing();
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= leftCurlyB PROGRAMBODY INICIO 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= comment INICIO 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= multicomment INICIO 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMBODY ::= comment PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMBODY ::= multicomment PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMBODY ::= DEFINITION PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMBODY ::= EVALUATION PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMBODY ::= error PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMBODY ::= rightCurlyB 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINITION ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINITION ::= EXPRG 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFINITION ::= separator separator 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONJUNTO ::= conj colon id arrow NOTATION semicolon 
            {
              Object RESULT =null;
		 System.out.println("Nuevo conjunto"); 
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NOTATION ::= id virgulilla id 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NOTATION ::= asciiChar virgulilla asciiChar 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NOTATION ::= LISTVAL 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NOTATION ::= ASCIIS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRG ::= id arrow PREFIXREGEX semicolon 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).value;
		 
            parser.ids++;
            AST finR = new AST(parser.ids, "#", null, null); 
            parser.ids++;
            AST newR = new AST(parser.ids, ".", (AST)r, finR);
            
            parser.rootT = newR;
            parser.rootT.generateAST((String) n);
            EXREGAN.trees.add((AST)r);
            EXREGAN.menu.addTree((String)n, EXREGAN.menu.getTrees());
            System.out.println("Nueva expresión regular"); 
          
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("EXPRG",5, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PREFIXREGEX ::= operatorAnd PREFIXREGEX PREFIXREGEX 
            {
              Object RESULT =null;
		int rileft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).left;
		int riright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).right;
		Object ri = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.peek()).value;
		
                    System.out.println("nuevo . P");
                    parser.ids++;
                    RESULT = new AST(parser.ids, ".", (AST)le, (AST)ri); 
                
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PREFIXREGEX ::= operatorOr PREFIXREGEX PREFIXREGEX 
            {
              Object RESULT =null;
		int rileft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).left;
		int riright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).right;
		Object ri = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.peek()).value;
		
                    System.out.println("nuevo | P");
                    parser.ids++;
                    RESULT = new AST(parser.ids, "|", (AST)le, (AST)ri); 
 
                
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PREFIXREGEX ::= operatorZeroMore PREFIXREGEX 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.peek()).value;
		
                    System.out.println("nuevo * P");
                    parser.ids++;
                    RESULT = new AST(parser.ids, "*", (AST)le, null); 

                
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PREFIXREGEX ::= operatorOneMore PREFIXREGEX 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.peek()).value;
		
                    System.out.println("nuevo + P");
                    parser.ids++;
                    RESULT = new AST(parser.ids, "+", (AST)le, null); 

                
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PREFIXREGEX ::= operatorZeroOne PREFIXREGEX 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.peek()).value;
		
                    System.out.println("nuevo ? P");
                    parser.ids++;
                    RESULT = new AST(parser.ids, "?", (AST)le, null); 
 
                
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PREFIXREGEX ::= leftCurlyB id rightCurlyB 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).value;
		
                    System.out.println("nuevo id"); 
                    
                    parser.ids++;
                    RESULT = new AST(parser.ids, o, null, null );

                
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PREFIXREGEX ::= stringVal 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Syntactical$stack.peek()).value;
		  
                    String contenido = (String)o;
                    //String [] concat=contenido.split("\"");//eliminando las comillas de la cadena para que no de error al generar el png
                    System.out.println("nuevo string"); 
                    
                    parser.ids++;
                    RESULT = new AST(parser.ids, contenido, null, null );

                
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PREFIXREGEX ::= specialChar 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Syntactical$stack.peek()).value;
		  
                    String contenido = (String)o;
                    System.out.println("nuevo specialChar"); 
                    
                    parser.ids++;
                    RESULT = new AST(parser.ids, contenido, null, null );

                
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EVALUATION ::= id colon stringVal semicolon 
            {
              Object RESULT =null;
		 System.out.println("Nuevo lexema a evaluar"); 
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("EVALUATION",3, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTVAL ::= id comma LISTVAL 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("LISTVAL",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTVAL ::= id 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("LISTVAL",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASCIIS ::= asciiChar comma ASCIIS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ASCIIS",9, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASCIIS ::= asciiChar 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ASCIIS",9, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntactical$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntactical$do_action(
    int                        CUP$Syntactical$act_num,
    java_cup.runtime.lr_parser CUP$Syntactical$parser,
    java.util.Stack            CUP$Syntactical$stack,
    int                        CUP$Syntactical$top)
    throws java.lang.Exception
    {
              return CUP$Syntactical$do_action_part00000000(
                               CUP$Syntactical$act_num,
                               CUP$Syntactical$parser,
                               CUP$Syntactical$stack,
                               CUP$Syntactical$top);
    }
}

}
