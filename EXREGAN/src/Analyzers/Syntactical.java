
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntactical extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntactical() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntactical(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactical(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\006\010\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\011\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\013\005\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\004\020\004\001\002\000\014\003\015\004" +
    "\013\005\017\015\012\035\011\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\002\000\001" +
    "\002\000\014\003\015\004\013\005\017\015\012\035\011" +
    "\001\002\000\004\023\024\001\002\000\004\015\023\001" +
    "\002\000\014\003\015\004\013\005\017\015\012\035\011" +
    "\001\002\000\014\003\ufffb\004\ufffb\005\ufffb\015\ufffb\035" +
    "\ufffb\001\002\000\014\003\015\004\013\005\017\015\012" +
    "\035\011\001\002\000\014\003\ufffa\004\ufffa\005\ufffa\015" +
    "\ufffa\035\ufffa\001\002\000\014\003\015\004\013\005\017" +
    "\015\012\035\011\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\uffff\001\002\000\014" +
    "\003\ufff9\004\ufff9\005\ufff9\015\ufff9\035\ufff9\001\002\000" +
    "\010\031\030\032\026\033\027\001\002\000\004\024\034" +
    "\001\002\000\012\024\ufff4\031\030\032\026\033\027\001" +
    "\002\000\012\024\ufff2\031\030\032\026\033\027\001\002" +
    "\000\012\024\ufff3\031\030\032\026\033\027\001\002\000" +
    "\004\024\ufff6\001\002\000\004\024\ufff5\001\002\000\004" +
    "\024\ufff7\001\002\000\010\031\042\032\035\033\040\001" +
    "\002\000\010\016\051\017\061\022\uffe9\001\002\000\004" +
    "\022\060\001\002\000\004\022\uffee\001\002\000\010\016" +
    "\053\017\054\022\uffe7\001\002\000\004\022\uffed\001\002" +
    "\000\010\016\043\017\044\022\uffea\001\002\000\006\031" +
    "\050\032\046\001\002\000\004\031\045\001\002\000\004" +
    "\022\ufff1\001\002\000\006\016\051\022\uffe9\001\002\000" +
    "\004\022\uffec\001\002\000\006\016\043\022\uffea\001\002" +
    "\000\006\031\050\032\046\001\002\000\004\022\uffeb\001" +
    "\002\000\004\033\056\001\002\000\004\033\055\001\002" +
    "\000\004\022\uffef\001\002\000\006\016\053\022\uffe7\001" +
    "\002\000\004\022\uffe8\001\002\000\014\003\ufff8\004\ufff8" +
    "\005\ufff8\015\ufff8\035\ufff8\001\002\000\004\032\062\001" +
    "\002\000\004\022\ufff0\001\002\000\004\002\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\004\002\004\001\001\000\012\003\006\004" +
    "\007\006\013\007\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\062\004\007\006" +
    "\013\007\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\021\004\007\006\013\007\015\001\001\000" +
    "\002\001\001\000\012\003\020\004\007\006\013\007\015" +
    "\001\001\000\002\001\001\000\012\003\017\004\007\006" +
    "\013\007\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\024\001" +
    "\001\000\002\001\001\000\004\010\032\001\001\000\004" +
    "\010\031\001\001\000\004\010\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\035" +
    "\012\036\013\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\051\001\001\000\002\001" +
    "\001\000\004\013\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactical$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactical$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactical$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        //TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        //Proyecto1.errores.add(tmp);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperaci√≥n
    public  void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        //TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        //Proyecto1.errores.add(tmp);
        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntactical$actions {
  private final Syntactical parser;

  /** Constructor */
  CUP$Syntactical$actions(Syntactical parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntactical$do_action_part00000000(
    int                        CUP$Syntactical$act_num,
    java_cup.runtime.lr_parser CUP$Syntactical$parser,
    java.util.Stack            CUP$Syntactical$stack,
    int                        CUP$Syntactical$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactical$result;

      /* select the action based on the action number */
      switch (CUP$Syntactical$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).value;
		RESULT = start_val;
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactical$parser.done_parsing();
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= leftCurlyB PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMBODY ::= comment PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMBODY ::= multicomment PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMBODY ::= DEFINITION PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMBODY ::= error PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFINITION ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFINITION ::= EXPRG 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEFINITION ::= separator separator 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONJUNTO ::= conj colon ID arrow NOTATION semicolon 
            {
              Object RESULT =null;
		 System.out.println("Nuevo conjunto"); 
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ID ::= letterUp ID 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ID ::= letterLow ID 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ID ::= number ID 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ID ::= letterUp 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ID ::= letterLow 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ID ::= number 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NOTATION ::= letterLow virgulilla letterLow 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NOTATION ::= letterUp virgulilla letterUp 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NOTATION ::= number virgulilla number 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NOTATION ::= LETTERS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NOTATION ::= NUMBERS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LETTERS ::= letterLow comma LETTERS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("LETTERS",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LETTERS ::= letterUp comma LETTERS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("LETTERS",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LETTERS ::= letterLow 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("LETTERS",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LETTERS ::= letterUp 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("LETTERS",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NUMBERS ::= number comma NUMBERS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NUMBERS",9, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NUMBERS ::= number 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NUMBERS",9, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntactical$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntactical$do_action(
    int                        CUP$Syntactical$act_num,
    java_cup.runtime.lr_parser CUP$Syntactical$parser,
    java.util.Stack            CUP$Syntactical$stack,
    int                        CUP$Syntactical$top)
    throws java.lang.Exception
    {
              return CUP$Syntactical$do_action_part00000000(
                               CUP$Syntactical$act_num,
                               CUP$Syntactical$parser,
                               CUP$Syntactical$stack,
                               CUP$Syntactical$top);
    }
}

}
