
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntactical extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntactical() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntactical(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactical(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\006\010\000\002\007\006\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\015\005\000" +
    "\002\015\003\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\011\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\013\005\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\020\004\001\002\000\022\003\020\004" +
    "\016\005\023\015\014\031\007\032\021\033\011\035\013" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\014\021\uffe6\024\uffe6\031\007\032\021\033\011" +
    "\001\002\000\004\002\000\001\002\000\014\021\uffe5\024" +
    "\uffe5\031\007\032\021\033\011\001\002\000\022\003\020" +
    "\004\016\005\023\015\014\031\007\032\021\033\011\035" +
    "\013\001\002\000\004\023\061\001\002\000\004\015\060" +
    "\001\002\000\022\003\ufffb\004\ufffb\005\ufffb\015\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\035\ufffb\001\002\000\022\003\020" +
    "\004\016\005\023\015\014\031\007\032\021\033\011\035" +
    "\013\001\002\000\004\024\027\001\002\000\022\003\020" +
    "\004\016\005\023\015\014\031\007\032\021\033\011\035" +
    "\013\001\002\000\014\021\uffe7\024\uffe7\031\007\032\021" +
    "\033\011\001\002\000\022\003\ufffa\004\ufffa\005\ufffa\015" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\035\ufffa\001\002\000\022" +
    "\003\020\004\016\005\023\015\014\031\007\032\021\033" +
    "\011\035\013\001\002\000\004\002\ufffe\001\002\000\006" +
    "\021\uffea\024\uffea\001\002\000\004\002\ufffc\001\002\000" +
    "\014\010\031\011\032\012\035\013\033\014\034\001\002" +
    "\000\004\022\056\001\002\000\006\006\037\020\040\001" +
    "\002\000\006\006\037\020\040\001\002\000\020\006\037" +
    "\010\031\011\032\012\035\013\033\014\034\020\040\001" +
    "\002\000\020\006\037\010\031\011\032\012\035\013\033" +
    "\014\034\020\040\001\002\000\020\006\037\010\031\011" +
    "\032\012\035\013\033\014\034\020\040\001\002\000\004" +
    "\022\ufff2\001\002\000\022\006\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\020\uffeb\022\uffeb\001\002\000\010" +
    "\031\007\032\021\033\011\001\002\000\004\022\ufff1\001" +
    "\002\000\004\021\043\001\002\000\022\006\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\020\uffec\022\uffec\001" +
    "\002\000\004\022\uffee\001\002\000\004\022\uffed\001\002" +
    "\000\004\022\ufff0\001\002\000\004\022\uffef\001\002\000" +
    "\020\006\037\010\031\011\032\012\035\013\033\014\034" +
    "\020\040\001\002\000\004\022\ufff4\001\002\000\004\022" +
    "\ufff3\001\002\000\020\006\037\010\031\011\032\012\035" +
    "\013\033\014\034\020\040\001\002\000\004\022\ufff6\001" +
    "\002\000\004\022\ufff5\001\002\000\022\003\ufff7\004\ufff7" +
    "\005\ufff7\015\ufff7\031\ufff7\032\ufff7\033\ufff7\035\ufff7\001" +
    "\002\000\004\002\uffff\001\002\000\022\003\ufff9\004\ufff9" +
    "\005\ufff9\015\ufff9\031\ufff9\032\ufff9\033\ufff9\035\ufff9\001" +
    "\002\000\010\031\007\032\021\033\011\001\002\000\004" +
    "\024\063\001\002\000\010\031\071\032\064\033\067\001" +
    "\002\000\010\016\100\017\110\022\uffdc\001\002\000\004" +
    "\022\107\001\002\000\004\022\uffe1\001\002\000\010\016" +
    "\102\017\103\022\uffda\001\002\000\004\022\uffe0\001\002" +
    "\000\010\016\072\017\073\022\uffdd\001\002\000\006\031" +
    "\077\032\075\001\002\000\004\031\074\001\002\000\004" +
    "\022\uffe4\001\002\000\006\016\100\022\uffdc\001\002\000" +
    "\004\022\uffdf\001\002\000\006\016\072\022\uffdd\001\002" +
    "\000\006\031\077\032\075\001\002\000\004\022\uffde\001" +
    "\002\000\004\033\105\001\002\000\004\033\104\001\002" +
    "\000\004\022\uffe2\001\002\000\006\016\102\022\uffda\001" +
    "\002\000\004\022\uffdb\001\002\000\022\003\ufff8\004\ufff8" +
    "\005\ufff8\015\ufff8\031\ufff8\032\ufff8\033\ufff8\035\ufff8\001" +
    "\002\000\004\032\111\001\002\000\004\022\uffe3\001\002" +
    "\000\004\002\ufffd\001\002\000\006\021\uffe8\024\uffe8\001" +
    "\002\000\006\021\uffe9\024\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\002\004\001\001\000\014\003\007\004" +
    "\011\006\014\007\021\010\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\113\001\001\000\002\001" +
    "\001\000\004\010\112\001\001\000\014\003\111\004\011" +
    "\006\014\007\021\010\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\056\004\011" +
    "\006\014\007\021\010\016\001\001\000\002\001\001\000" +
    "\014\003\025\004\011\006\014\007\021\010\016\001\001" +
    "\000\004\010\024\001\001\000\002\001\001\000\014\003" +
    "\023\004\011\006\014\007\021\010\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\027\001\001\000\002\001\001\000\004\015\052\001\001" +
    "\000\004\015\047\001\001\000\006\014\045\015\046\001" +
    "\001\000\006\014\043\015\044\001\001\000\006\014\035" +
    "\015\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\050\015\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\053\015\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\061\001\001\000\002\001\001\000\010\011\064" +
    "\012\065\013\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\100\001\001\000\002\001" +
    "\001\000\004\013\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactical$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactical$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactical$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        //TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        //Proyecto1.errores.add(tmp);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperaci√≥n
    public  void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        //TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        //Proyecto1.errores.add(tmp);
        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntactical$actions {
  private final Syntactical parser;

  /** Constructor */
  CUP$Syntactical$actions(Syntactical parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntactical$do_action_part00000000(
    int                        CUP$Syntactical$act_num,
    java_cup.runtime.lr_parser CUP$Syntactical$parser,
    java.util.Stack            CUP$Syntactical$stack,
    int                        CUP$Syntactical$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactical$result;

      /* select the action based on the action number */
      switch (CUP$Syntactical$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)).value;
		RESULT = start_val;
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactical$parser.done_parsing();
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= leftCurlyB PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMBODY ::= comment PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMBODY ::= multicomment PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMBODY ::= DEFINITION PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMBODY ::= error PROGRAMBODY 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PROGRAMBODY",1, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFINITION ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFINITION ::= EXPRG 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEFINITION ::= separator separator 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("DEFINITION",2, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONJUNTO ::= conj colon ID arrow NOTATION semicolon 
            {
              Object RESULT =null;
		 System.out.println("Nuevo conjunto"); 
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRG ::= ID arrow PREFIXREGEX semicolon 
            {
              Object RESULT =null;
		 System.out.println("Nueva expresi√≥n regular"); 
              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("EXPRG",5, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PREFIXREGEX ::= operatorAnd ELEMENT PREFIXREGEX 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",10, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PREFIXREGEX ::= operatorAnd ELEMENT ELEMENT 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",10, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PREFIXREGEX ::= operatorOr ELEMENT PREFIXREGEX 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",10, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PREFIXREGEX ::= operatorOr ELEMENT ELEMENT 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",10, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PREFIXREGEX ::= operatorZeroMore PREFIXREGEX 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",10, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PREFIXREGEX ::= operatorZeroMore ELEMENT 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",10, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PREFIXREGEX ::= operatorOneMore PREFIXREGEX 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",10, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PREFIXREGEX ::= operatorOneMore ELEMENT 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",10, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PREFIXREGEX ::= operatorZeroOne PREFIXREGEX 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",10, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PREFIXREGEX ::= operatorZeroOne ELEMENT 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("PREFIXREGEX",10, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENT ::= leftCurlyB ID rightCurlyB 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ELEMENT",11, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENT ::= stringVal 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ELEMENT",11, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ID ::= letterUp ID 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ID ::= letterLow ID 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ID ::= number ID 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ID ::= letterUp 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ID ::= letterLow 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ID ::= number 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NOTATION ::= letterLow virgulilla letterLow 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NOTATION ::= letterUp virgulilla letterUp 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NOTATION ::= number virgulilla number 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NOTATION ::= LETTERS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NOTATION ::= NUMBERS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NOTATION",7, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LETTERS ::= letterLow comma LETTERS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("LETTERS",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LETTERS ::= letterUp comma LETTERS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("LETTERS",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LETTERS ::= letterLow 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("LETTERS",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LETTERS ::= letterUp 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("LETTERS",8, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NUMBERS ::= number comma NUMBERS 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NUMBERS",9, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.elementAt(CUP$Syntactical$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NUMBERS ::= number 
            {
              Object RESULT =null;

              CUP$Syntactical$result = parser.getSymbolFactory().newSymbol("NUMBERS",9, ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactical$stack.peek()), RESULT);
            }
          return CUP$Syntactical$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntactical$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntactical$do_action(
    int                        CUP$Syntactical$act_num,
    java_cup.runtime.lr_parser CUP$Syntactical$parser,
    java.util.Stack            CUP$Syntactical$stack,
    int                        CUP$Syntactical$top)
    throws java.lang.Exception
    {
              return CUP$Syntactical$do_action_part00000000(
                               CUP$Syntactical$act_num,
                               CUP$Syntactical$parser,
                               CUP$Syntactical$stack,
                               CUP$Syntactical$top);
    }
}

}
