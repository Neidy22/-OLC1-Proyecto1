//importaciones
package Analyzers;
import java_cup.runtime.*;

parser code
{:
    //metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        //TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        //Proyecto1.errores.add(tmp);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperaci칩n
    public  void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        //TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        //Proyecto1.errores.add(tmp);
        
    }
:}


//DEFINICION DE LOS TERMINALES 
//expresiones compuestas
terminal String comment, multicomment, stringVal, id;

//operadores de las expresiones 
terminal String operatorAnd, operatorOr, operatorZeroMore, operatorOneMore, operatorZeroOne;

//simbolos
terminal String separator, comma, virgulilla, leftCurlyB, rightCurlyB, semicolon, colon, arrow, letterLow, letterUp, number, asciiChar;

//reservadas
terminal String conj;

//DEFINICION DE LOS NO TERMINALES
non terminal INICIO, PROGRAMBODY, DEFINITION, EVALUATION, CONJUNTO, EXPRG, ID, NOTATION, LETTERS, NUMBERS,PREFIXREGEX, ELEMENT; 

//PRECEDENCIAS

//le indico  con cu치l palabra reservada va a comenzar la gram치tica
start with INICIO;

INICIO ::= leftCurlyB PROGRAMBODY;
         

PROGRAMBODY ::= comment PROGRAMBODY
               |multicomment PROGRAMBODY
               |DEFINITION PROGRAMBODY
               |EVALUATION PROGRAMBODY
               |error PROGRAMBODY
               |rightCurlyB;

//definicion de los conjuntos
DEFINITION ::= CONJUNTO 
             | EXPRG 
             | separator separator;


CONJUNTO ::= conj colon ID arrow NOTATION semicolon {: System.out.println("Nuevo conjunto"); :};

NOTATION ::= letterLow virgulilla letterLow
           | letterUp virgulilla letterUp
           | number virgulilla number
           | LETTERS
           | NUMBERS;

//definicion de las expresiones regulares
EXPRG ::= ID arrow  PREFIXREGEX semicolon{: System.out.println("Nueva expresi칩n regular"); :};


PREFIXREGEX ::= operatorAnd ELEMENT PREFIXREGEX
              | operatorAnd ELEMENT ELEMENT
              | operatorOr ELEMENT  PREFIXREGEX
              | operatorOr ELEMENT ELEMENT
              | operatorZeroMore PREFIXREGEX
              | operatorZeroMore ELEMENT
              | operatorOneMore  PREFIXREGEX
              | operatorOneMore  ELEMENT
              | operatorZeroOne PREFIXREGEX
              | operatorZeroOne ELEMENT;



ELEMENT ::= leftCurlyB ID rightCurlyB 
          | stringVal; 


//lexemas a evaluar
EVALUATION ::= ID colon stringVal semicolon {: System.out.println("Nuevo lexema a evaluar"); :};



ID ::= letterUp ID
     | letterLow ID
     | number ID 
     | letterUp
     | letterLow
     | number;



LETTERS ::= letterLow comma LETTERS
          | letterUp comma LETTERS
          | letterLow
          | letterUp;

NUMBERS ::= number comma NUMBERS
          | number;
 







               
