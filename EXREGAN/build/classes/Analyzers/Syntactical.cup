//importaciones
package Analyzers;
import Main.EXREGAN;
import Objects.*;
import ui.*;
import java_cup.runtime.*;

parser code
{:
    
    //metodos para controlar el arbol de expresiones
    public static int ids = 0;
    public static AST rootT;
    public static String notacion ="";

    //metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        EXREGAN.errores.add(tmp);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperaci칩n
    public  void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        EXREGAN.errores.add(tmp);
        
    }
:}


//DEFINICION DE LOS TERMINALES 
//expresiones compuestas
terminal String comment, multicomment, stringVal, id;

//operadores de las expresiones 
terminal String operatorAnd, operatorOr, operatorZeroMore, operatorOneMore, operatorZeroOne;

//simbolos
terminal String separator, comma, virgulilla, leftCurlyB, rightCurlyB, semicolon, colon, arrow, asciiChar, specialChar;

//reservadas
terminal String conj;

//DEFINICION DE LOS NO TERMINALES
non terminal INICIO, PROGRAMBODY, DEFINITION, EVALUATION, CONJUNTO, EXPRG, NOTATION, LISTVAL, PREFIXREGEX, ASCIIS; 

//PRECEDENCIAS
precedence left operatorOr;
precedence left operatorAnd;

//le indico  con cu치l palabra reservada va a comenzar la gram치tica
start with INICIO;

INICIO ::= leftCurlyB PROGRAMBODY INICIO
        |  comment INICIO
        |  multicomment INICIO;
        

         

PROGRAMBODY ::= comment PROGRAMBODY
               |multicomment PROGRAMBODY
               |DEFINITION PROGRAMBODY
               |EVALUATION PROGRAMBODY
               |error PROGRAMBODY
               |rightCurlyB;

//definicion de los conjuntos
DEFINITION ::= CONJUNTO 
             | EXPRG 
             | separator separator;


CONJUNTO ::= conj colon id:i arrow NOTATION:n semicolon 
            {: 
               
               System.out.println("Nuevo conjunto" + parser.notacion); 
               Conjunto newConj = new Conjunto((String)i, parser.notacion);
               EXREGAN.conjuntos.add(newConj);
               parser.notacion = "";
            :};

NOTATION ::= id:i1 virgulilla:i2 id:i3
            {: parser.notacion += i1;
               parser.notacion += i2;
               parser.notacion += i3;
            :}
           | asciiChar:i1 virgulilla:i2 asciiChar:i3
            {: parser.notacion += i1;
               parser.notacion += i2;
               parser.notacion += i3;
            :}
           | LISTVAL
           | ASCIIS;

//definicion de las expresiones regulares
EXPRG ::= id:n arrow  PREFIXREGEX:r semicolon
          {: 
            parser.ids++;
            AST finR = new AST(parser.ids, "#", null, null); 
            parser.ids++;
            AST newR = new AST(parser.ids, ".", (AST)r, finR);
            
            parser.rootT = newR;
            parser.rootT.generateAST((String) n);
            EXREGAN.trees.add((AST)r);
            //EXREGAN.menu.addTree((String)n, EXREGAN.menu.getTrees());
            System.out.println("Nueva expresi칩n regular"); 
          :};


PREFIXREGEX ::= operatorAnd PREFIXREGEX:le PREFIXREGEX:ri
                {:
                    System.out.println("nuevo . P");
                    parser.ids++;
                    RESULT = new AST(parser.ids, ".", (AST)le, (AST)ri); 
                :}

              | operatorOr PREFIXREGEX:le  PREFIXREGEX:ri
                {:
                    System.out.println("nuevo | P");
                    parser.ids++;
                    RESULT = new AST(parser.ids, "|", (AST)le, (AST)ri); 
 
                :}

              | operatorZeroMore PREFIXREGEX:le
                {:
                    System.out.println("nuevo * P");
                    parser.ids++;
                    RESULT = new AST(parser.ids, "*", (AST)le, null); 

                :}

              | operatorOneMore  PREFIXREGEX:le
                {:
                    System.out.println("nuevo + P");
                    parser.ids++;
                    RESULT = new AST(parser.ids, "+", (AST)le, null); 
                    
                    

                :}

              | operatorZeroOne PREFIXREGEX:le
                {:
                    System.out.println("nuevo ? P");
                    parser.ids++;
                    RESULT = new AST(parser.ids, "?", (AST)le, null); 
 
                :}
              | leftCurlyB id:o rightCurlyB 
                {:
                    System.out.println("nuevo id"); 
                    
                    parser.ids++;
                    RESULT = new AST(parser.ids, o, null, null );

                :}
              | stringVal:o
                {:  
                    String contenido = (String)o;
                    //String [] concat=contenido.split("\"");//eliminando las comillas de la cadena para que no de error al generar el png
                    System.out.println("nuevo string"); 
                    
                    parser.ids++;
                    RESULT = new AST(parser.ids, contenido, null, null );

                :}
              | specialChar:o
                {:  
                    String contenido = (String)o;
                    System.out.println("nuevo specialChar"); 
                    
                    parser.ids++;
                    RESULT = new AST(parser.ids, contenido, null, null );

                :};







//lexemas a evaluar
EVALUATION ::= id:i colon stringVal:v semicolon 
             {: System.out.println("Nuevo lexema a evaluar"); 
                Evaluation newEval = new Evaluation((String)i, (String)v);
                newEval.setNameF(mainMenu.nameActualF);
                EXREGAN.evaluations.add(newEval);

             :};


//listas
LISTVAL ::= id:i1 comma:i2 LISTVAL
            {:
                parser.notacion += i1;
                parser.notacion += i2;
            :}
          | id:i1
            {:
                parser.notacion += i1;
                parser.notacion += ",";
            :};

ASCIIS ::= asciiChar:i1 comma:i2 ASCIIS
            {:
                parser.notacion += i1;
                parser.notacion += i2;
            :}
         | asciiChar:i1
            {:
                parser.notacion += i1;
                parser.notacion += ",";
            :};






               
